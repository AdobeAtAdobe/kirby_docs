swagger: '2.0'
info:
  description: >-
    Adobe Experience Platform Privacy Service provides a common, centralized facilitation of access/delete requests for private data. The service includes a UI for selecting and creating requests, a business layer that processes incoming and outgoing traffic, a data store for audit and logging information, and temporary storage for data retrieval while requests are pending or waiting to be viewed.


    Related documentation:
      * [GDPR on Adobe Experience Platform Overview](https://www.adobe.io/apis/experienceplatform/home/services/privacy-service.html#!api-specification/markdown/narrative/technical_overview/privacy_service_overview/gdpr-on-platform-overview.md)
      * [Privacy Service API tutorial](https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/privacy_service_tutorial/privacy_service_api_tutorial.md)

    Visualize API calls with Postman (a free, third-party software):
      * [Privacy Service API Postman collection on GitHub](https://github.com/adobe/experience-platform-postman-samples/blob/master/apis/experience-platform/Privacy%20Service%20API.postman_collection.json)
      * [Video guide for creating the Postman environment](https://video.tv.adobe.com/v/28832)
      * [Steps for importing environments and collections in Postman](https://learning.getpostman.com/docs/postman/collection_runs/using_environments_in_collection_runs/)

    API paths:
      * PLATFORM Gateway URL: https://<span>platform.adobe.io/
      * Base path for this API: /data/privacy/gdpr
      * Example of a complete path: https://<span>platform.adobe.io/data/privacy/gdpr/ping
    
    Required headers:
      * All calls require the headers `Authorization`, `x-gw-ims-org-id`, and `x-api-key`. For more information on how to obtain these values, see the [authentication tutorial](https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/authenticate_to_acp_tutorial/authenticate_to_acp_tutorial.md).
      * All requests with a payload in the request body (such as POST, PUT, and PATCH calls) must include the header `Content-Type` with a value of `application/json`.
  

  version: '1.0'
  title: Privacy Service API
  termsOfService: 'https://www.adobe.com/legal/terms.html'
host: platform.adobe.io
basePath: /data/privacy/gdpr
tags:
  - name: Privacy Service
    description: "Retrieve and create access/delete requests, including child jobs for existing requests."
  - name: Ping
    description: "Check the processing status of access or delete requests by supplying a status code integer as a query parameter."
  - name: Files
    description: "View and upload files from various Adobe solutions for specified job requests."
  - name: Products
    description: "View details of Adobe products available within your organization's Privacy Service integrations."
  - name: Users
    description: "View, create, update, or delete users and their permissions within your organization's Privacy Service configuration."

paths:
  /:
    parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Privacy Service
      summary: Retrieve details of all jobs for the current logged-in user.
      description: ''
      operationId: getStatus(all)
      parameters:
        - name: fromDate
          in: query
          required: false
          type: string
        - name: toDate
          in: query
          required: false
          type: string
        - name: data
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: 'If found, The details of requested jobId is returned.'
          schema:
            $ref: '#/definitions/A%20GDPR%20Request%20model'
        '400':
          description: Bad Request. The request is malformed
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '401':
          description: Unauthorized. The request has not been applied because it  lacks valid authentication credentials for the target resource.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '403':
          description: Forbidden. That combination of arguments is not allowed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '404':
          description: Not Found. The resource the client is looking for isn't there.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '405':
          description: Method Not Allowed. Client sent a request using a HTTP method that the server doesn't support.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '406':
          description: Not Acceptable. Unacceptable content type. The caller sent an <b>Accept</b> header for a content type which does not exist on the server
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '422':
          description: Unprocessable Entity. Client sent a correct request that contained invalid values for one or more parameters.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '500':
          description: Internal Server Error. This is an indicator of a server-side error.
        '502':
          description: Bad Gateway. This is an indicator that the search back-end did not send a valid response.
        '503':
          description: Service Unavailable. This is an indicator of a potential server overload.
        '504':
          description: Gateway Timeout. This is an indicator that the search back-end did not complete a response within an allowed time period.
    post:
      tags:
        - Privacy Service
      summary: Create an access or delete job request.
      description: An authenticated user can submit requests to access or delete their privacy data.
      operationId: handleExternalRequest
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: JSON file or valid JSON to submit requests
          required: true
          schema:
            $ref: '#/definitions/A%20GDPR%20Request%20model'
        - $ref: '#/parameters/json-header'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/A%20GDPR%20Response%20model'
        '202':
          description: GDPR requests created successfully
          schema:
            $ref: '#/definitions/ResponseEntity'
        '400':
          description: Bad Request. The request is malformed
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '401':
          description: Unauthorized. The request has not been applied because it  lacks valid authentication credentials for the target resource.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '403':
          description: Forbidden. That combination of arguments is not allowed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '404':
          description: Not Found. The resource the client is looking for isn't there.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '405':
          description: Method Not Allowed. Client sent a request using a HTTP method that the server doesn't support.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '406':
          description: Not Acceptable. Unacceptable content type. The caller sent an <b>Accept</b> header for a content type which does not exist on the server
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '422':
          description: Unprocessable Entity. Client sent a correct request that contained invalid values for one or more parameters.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '500':
          description: Internal Server Error. This is an indicator of a server-side error.
        '502':
          description: Bad Gateway. This is an indicator that the search back-end did not send a valid response.
        '503':
          description: Service Unavailable. This is an indicator of a potential server overload.
        '504':
          description: Gateway Timeout. This is an indicator that the search back-end did not complete a response within an allowed time period.
  /files/{jobId}:
    parameters:
      - name: jobId
        in: path
        description: ID of the job from which to retrieve or list files.
        required: true
        type: string
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Files
      summary: Retrieve the files associated with a job by ID.
      description: 'Returns list of files uploaded for {jobId}'
      operationId: getJobFiles
      produces:
        - application/json
      responses:
        '200':
          description: Successful list of files
          schema:
            $ref: '#/definitions/FileResponse'
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  "/files/{jobId}/{solutionName}":
    parameters:
      - name: jobId
        in: path
        description: jobId to upload the files
        required: true
        type: string
      - name: solutionName
        in: path
        description: SolutionName
        required: true
        type: string
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    post:
      tags:
        - Files
      summary: Upload files to a job by ID.
      description: Returns file upload status and error object.
      operationId: postDataForCompletedJob
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file
          in: formData
          description: file
          required: false
          type: file
        - $ref: '#/parameters/multipart-header'
      responses:
        '200':
          description: Successful upload of files
          schema:
            $ref: '#/definitions/FileResponse'
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  /ping:
    parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Ping
      summary: Retrieve the processing status of access or delete requests by status code.
      description: The message is read from the properties
      operationId: getProcessingStatus
      parameters:
        - name: status
          in: query
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Something'
        '400':
          description: Bad Request!!!
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized!!!
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden!!!
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: 'Something went wrong, Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /products:
    parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Products
      summary: Retrieve the details of all products.
      description: Returns a complete list of all products with details.
      operationId: getAllProducts
      responses:
        '200':
          description: Successful retrieval of all product detail
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: No Products found in the system
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  /products/{productName}:
    parameters:
      - name: productName
        in: path
        description: Product Name for details
        required: true
        type: string
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
          - Products
      summary: Lookup a product by name.
      description: Returns details of a product.
      operationId: getProductsByName
      responses:
        '200':
          description: Successful retrieval of product details
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: No Products found in the system
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  /userPrefs:
    parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Privacy Service
      summary: Retrieve user preferences for the current logged-in user.
      description: ''
      operationId: getUserPreferences
      responses:
        '200':
          description: 'If found, The details of requested jobId is returned.'
          schema:
            $ref: '#/definitions/A%20GDPR%20Request%20model'
        '400':
          description: Bad Request. The request is malformed
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '401':
          description: Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '403':
          description: Forbidden. That combination of arguments is not allowed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '404':
          description: Not Found. The resource the client is looking for isn't there.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '405':
          description: Method Not Allowed. Client sent a request using a HTTP method that the server doesn't support.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '406':
          description: Not Acceptable. Unacceptable content type. The caller sent an <b>Accept</b> header for a content type which does not exist on the server
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '422':
          description: Unprocessable Entity. Client sent a correct request that contained invalid values for one or more parameters.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '500':
          description: Internal Server Error. This is an indicator of a server-side error.
        '502':
          description: Bad Gateway. This is an indicator that the search back-end did not send a valid response.
        '503':
          description: Service Unavailable. This is an indicator of a potential server overload.
        '504':
          description: Gateway Timeout. This is an indicator that the search back-end did not complete a response within an allowed time period.
  /users:
    parameters:
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Users
      summary: Retrieve the details of all users.
      description: Returns a complete list of all users with details.
      operationId: getAllUsers
      responses:
        '200':
          description: Successful retrieval of all user detail
          schema:
            $ref: '#/definitions/UserInfo'
        '404':
          description: No Users found in the system
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
    post:
      tags:
        - Users
      summary: Create a user as an admin for Privacy Service.
      description: Returns added user json with status
      operationId: createUser
      parameters:
        - in: body
          name: body
          description: User details to be added
          required: true
          schema:
            $ref: '#/definitions/UserInfo'
        - $ref: "#/parameters/json-header"
      responses:
        '200':
          description: 'Successful creation of user '
          schema:
            $ref: '#/definitions/UserInfo'
        '400':
          description: User already exists in the system & can not be added
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        description: User id for details
        required: true
        type: string
        pattern: .+
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Users
      summary: Lookup a user by ID.
      description: Returns details of a user.
      operationId: getUsersById
      responses:
        '200':
          description: Successful retrieval of user details
          schema:
            $ref: '#/definitions/UserInfo'
        '404':
          description: No Users found in the system
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
    put:
      tags:
        - Users
      summary: Update the details of a user by ID.
      description: Returns updated user json with status
      operationId: updateUser
      parameters:
        - in: body
          name: body
          description: User Details to be updated
          required: true
          schema:
            $ref: '#/definitions/UserInfo'
        - $ref: '#/parameters/json-header'
      responses:
        '200':
          description: 'Successful updation of user '
          schema:
            $ref: '#/definitions/UserInfo'
        '404':
          description: No user found in the system for update
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
    delete:
      tags:
        - Users
      summary: Delete a user by ID.
      description: Returns deleted user json with status
      operationId: deleteUser
      responses:
        '200':
          description: 'Successful deletion of user '
          schema:
            $ref: '#/definitions/UserInfo'
        '404':
          description: No user found in the system for deletion
        '417':
          description: Expectation Failed!! Validation failed
        '500':
          description: Internal server error
        '503':
          description: 'Exception Occurred!! '
  '/{jobId}':
    parameters:
      - name: jobId
        in: path
        description: jobId
        required: true
        type: string
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    get:
      tags:
        - Privacy Service
      summary: Lookup the details of a job by ID.
      description: ''
      operationId: getStatus
      responses:
        '200':
          description: 'If found, The details of requested jobId is returned.'
          schema:
            $ref: '#/definitions/A%20GDPR%20Request%20model'
        '400':
          description: Bad Request. The request is malformed
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '401':
          description: Unauthorized. The request has not been applied because it  lacks valid authentication credentials for the target resource.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '403':
          description: Forbidden. That combination of arguments is not allowed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '404':
          description: Not Found. The resource the client is looking for isn't there.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '405':
          description: Method Not Allowed. Client sent a request using a HTTP method that the server doesn't support.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '406':
          description: Not Acceptable. Unacceptable content type. The caller sent an <b>Accept</b> header for a content type which does not exist on the server
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '422':
          description: Unprocessable Entity. Client sent a correct request that contained invalid values for one or more parameters.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '500':
          description: Internal Server Error. This is an indicator of a server-side error.
        '502':
          description: Bad Gateway. This is an indicator that the search back-end did not send a valid response.
        '503':
          description: Service Unavailable. This is an indicator of a potential server overload.
        '504':
          description: Gateway Timeout. This is an indicator that the search back-end did not complete a response within an allowed time period.
  '/{parentJobId}/child':
    parameters:
      - name: parentJobId
        in: path
        description: parentJobId
        required: true
        type: string
      - $ref: '#/parameters/authorization'
      - $ref: '#/parameters/x-api-key'
      - $ref: '#/parameters/x-gw-ims-org-id'
    post:
      tags:
        - Privacy Service
      summary: Create a child job for an existing parent job by ID.
      description: An authenticated user can submit requests for creating a child job for an existing parent job.
      operationId: createChildJob
      parameters:
        - in: body
          name: body
          description: JSON file or valid JSON to submit requests
          required: true
          schema:
            $ref: '#/definitions/ChildJobRequest'
        - $ref: '#/parameters/json-header'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/A%20GDPR%20Response%20model'
        '202':
          description: GDPR requests created successfully
          schema:
            $ref: '#/definitions/ResponseEntity'
        '400':
          description: Bad Request. The request is malformed
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '401':
          description: Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '403':
          description: Forbidden. That combination of arguments is not allowed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '404':
          description: Not Found. The resource the client is looking for isn't there.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '405':
          description: Method Not Allowed. Client sent a request using a HTTP method that the server doesn't support.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '406':
          description: Not Acceptable. Unacceptable content type. The caller sent an <b>Accept</b> header for a content type which does not exist on the server
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '417':
          description: Request processing failed.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '422':
          description: Unprocessable Entity. Client sent a correct request that contained invalid values for one or more parameters.
          schema:
            $ref: '#/definitions/Problem%20Detail'
        '500':
          description: Internal Server Error. This is an indicator of a server-side error.
        '502':
          description: Bad Gateway. This is an indicator that the search back-end did not send a valid response.
        '503':
          description: Service Unavailable. This is an indicator of a potential server overload.
        '504':
          description: Gateway Timeout. This is an indicator that the search back-end did not complete a response within an allowed time period.
parameters:
  authorization:
    name: Authorization
    description: 'The access token which can be copied from your Experience Platform integration, prefixed with "Bearer". For more information on how to obtain this value, visit the <a href="https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/authenticate_to_acp_tutorial/authenticate_to_acp_tutorial.md">authentication tutorial</a>.'
    required: true
    type: string
    in: header
  x-gw-ims-org-id:
    name: x-gw-ims-org-id
    description: 'The Organization ID which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the <a href="https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/authenticate_to_acp_tutorial/authenticate_to_acp_tutorial.md">authentication tutorial</a>.'
    required: true
    type: string
    in: header
  x-api-key:
    name: x-api-key
    description: 'The API key which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the <a href="https://www.adobe.io/apis/experienceplatform/home/tutorials/alltutorials.html#!api-specification/markdown/narrative/tutorials/authenticate_to_acp_tutorial/authenticate_to_acp_tutorial.md">authentication tutorial</a>.'
    required: true
    type: string
    in: header
  json-header:
    name: Content-Type
    description: 'application/json'
    required: true
    type: string
    in: header
  multipart-header:
    name: Content-Type
    description: 'multipart/form-data'
    required: true
    type: string
    in: header
definitions:
  A CompanyContext model:
    type: object
    required:
      - namespace
      - value
    properties:
      namespace:
        type: string
      value:
        type: string
  A GDPR Request model:
    type: object
    required:
      - companyContexts
      - users
    properties:
      companyContexts:
        type: array
        items:
          $ref: '#/definitions/A%20CompanyContext%20model'
        maxItems: 2147483647
        minItems: 1
      users:
        type: array
        items:
          $ref: '#/definitions/A%20model%20for%20Users'
        maxItems: 2147483647
        minItems: 1
      exclude:
        type: array
        uniqueItems: true
        items:
          type: string
      expandIds:
        type: boolean
      analyticsDeleteMethod:
        type: string
        enum: [anonymize,purge]
      priority:
        type: string
        enum: [low,normal]
  A GDPR Response model:
    type: object
    properties:
      jobs:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/JobDTO'
      errors:
        $ref: '#/definitions/Problem%20Detail'
      meta:
        $ref: '#/definitions/ServicePageResult'
      requestStatus:
        type: integer
        format: int32
      totalRecords:
        type: integer
        format: int64
  A model for Users:
    type: object
    required:
    - action
    - key
    - userIDs
    properties:
      key:
        type: string
      action:
        type: array
        uniqueItems: true
        items:
          type: string
        maxItems: 2147483647
        minItems: 1
      userIDs:
        type: array
        items:
          $ref: '#/definitions/UserId'
        maxItems: 2147483647
        minItems: 1
  ChildJobRequest:
    type: object
    required:
    - include
    - userIDs
    properties:
      parentJobId:
        type: string
      userIDs:
        type: array
        items:
          $ref: '#/definitions/UserIdDTO'
        maxItems: 2147483647
        minItems: 1
      include:
        type: array
        uniqueItems: true
        items:
          type: string
        maxItems: 2147483647
        minItems: 1
  CustomerDTO:
    type: object
    properties:
      user:
        $ref: '#/definitions/A%20model%20for%20Users'
      companyContexts:
        type: array
        items:
          $ref: '#/definitions/A%20CompanyContext%20model'
  ErrorResponse:
    type: object
    properties:
      reason:
        type: string
      message:
        type: string
    xml:
      name: error
  FileResponse:
    type: object
    properties:
      files:
        type: array
        items:
          type: string
      message:
        type: string
  JobDTO:
    type: object
    properties:
      jobId:
        type: string
      customer:
        $ref: '#/definitions/CustomerDTO'
      rootJobId:
        type: string
  JsonApi:
    type: object
  Problem Detail:
    type: object
    properties:
      errorType:
        type: string
        example: 'https://mcloud.io/client-error'
        description: A URI reference (RFC3986) that identifies the problem type.
      errorCode:
        type: integer
        format: int32
        example: 4xx
        description: The HTTP status code generated by the server for this occurrence of the problem.
      title:
        type: string
        example: Client side error
        description: 'A short, human-readable summary of the problem type.'
      detail:
        type: string
        example: Invalid ID format
        description: A human-readable explanation specific to this occurrence of the problem.
    description: 'An error object containing a problem detail, as defined by <a href="https://tools.ietf.org/html/rfc7807">RFC 7807 Problem Details for HTTP APIs</a>. The returned content-type is the <i>application/problem+json</i> media type. When present, this response contains machine-readable details pertaining to the error. Problem details include a <i>type</i>, which is a URI.'
  Product:
    type: object
    properties:
      productId:
        type: integer
        format: int32
      productName:
        type: string
      inUse:
        type: boolean
        default: false
      createdOn:
        type: string
        format: date-time
      createdBy:
        type: string
      comments:
        type: string
      parentId:
        type: integer
        format: int32
      responseThreshold:
        type: integer
        format: int32
      statusCode:
        type: string
      statusMessage:
        type: string
  ResponseEntity:
    type: object
    properties:
      headers:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
      body:
        type: object
      statusCode:
        type: string
        enum:
          - CONTINUE
          - SWITCHING_PROTOCOLS
          - PROCESSING
          - CHECKPOINT
          - OK
          - CREATED
          - ACCEPTED
          - NON_AUTHORITATIVE_INFORMATION
          - NO_CONTENT
          - RESET_CONTENT
          - PARTIAL_CONTENT
          - MULTI_STATUS
          - ALREADY_REPORTED
          - IM_USED
          - MULTIPLE_CHOICES
          - MOVED_PERMANENTLY
          - FOUND
          - MOVED_TEMPORARILY
          - SEE_OTHER
          - NOT_MODIFIED
          - USE_PROXY
          - TEMPORARY_REDIRECT
          - RESUME_INCOMPLETE
          - BAD_REQUEST
          - UNAUTHORIZED
          - PAYMENT_REQUIRED
          - FORBIDDEN
          - NOT_FOUND
          - METHOD_NOT_ALLOWED
          - NOT_ACCEPTABLE
          - PROXY_AUTHENTICATION_REQUIRED
          - REQUEST_TIMEOUT
          - CONFLICT
          - GONE
          - LENGTH_REQUIRED
          - PRECONDITION_FAILED
          - REQUEST_ENTITY_TOO_LARGE
          - REQUEST_URI_TOO_LONG
          - UNSUPPORTED_MEDIA_TYPE
          - REQUESTED_RANGE_NOT_SATISFIABLE
          - EXPECTATION_FAILED
          - I_AM_A_TEAPOT
          - INSUFFICIENT_SPACE_ON_RESOURCE
          - METHOD_FAILURE
          - DESTINATION_LOCKED
          - UNPROCESSABLE_ENTITY
          - LOCKED
          - FAILED_DEPENDENCY
          - UPGRADE_REQUIRED
          - PRECONDITION_REQUIRED
          - TOO_MANY_REQUESTS
          - REQUEST_HEADER_FIELDS_TOO_LARGE
          - INTERNAL_SERVER_ERROR
          - NOT_IMPLEMENTED
          - BAD_GATEWAY
          - SERVICE_UNAVAILABLE
          - GATEWAY_TIMEOUT
          - HTTP_VERSION_NOT_SUPPORTED
          - VARIANT_ALSO_NEGOTIATES
          - INSUFFICIENT_STORAGE
          - LOOP_DETECTED
          - BANDWIDTH_LIMIT_EXCEEDED
          - NOT_EXTENDED
          - NETWORK_AUTHENTICATION_REQUIRED
  ServicePageResult:
    type: object
    properties:
      totalPages:
        type: integer
        format: int32
      jsonapi:
        $ref: '#/definitions/JsonApi'
  Something:
    type: object
    properties:
      message:
        type: string
        description: the message to say
    description: Sample model for the documentation
  UserId:
    type: object
    properties:
      namespace:
        type: string
      value:
        type: string
      type:
        type: string
      namespaceId:
        type: integer
        format: int32
      isDeletedClientSide:
        type: boolean
        default: false
  UserIdDTO:
    type: object
    properties:
      namespace:
        type: string
      value:
        type: string
      type:
        type: string
      namespaceId:
        type: integer
        format: int32
      isDeletedClientSide:
        type: boolean
        default: false
  UserInfo:
    type: object
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: string
      role:
        type: string
      emailId:
        type: string
      statusCode:
        type: string
      statusMessage:
        type: string